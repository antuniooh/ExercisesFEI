{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "## Exercício 2" ] }, { "cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Número de linhas e colunas: (1030, 9)\n" ] }, { "data": { "text/html": [ "
\n", "\n", "\n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", "
cement	blast_furnace_slag	fly_ash	water	superplasticizer	coarse_aggregate	fine_aggregate	age	concrete_compressive_strength
0	540.0	0.0	0.0	162.0	2.5	1040.0	676.0	28	79.99
1	540.0	0.0	0.0	162.0	2.5	1055.0	676.0	28	61.89
2	332.5	142.5	0.0	228.0	0.0	932.0	594.0	270	40.27
3	332.5	142.5	0.0	228.0	0.0	932.0	594.0	365	41.05
4	198.6	132.4	0.0	192.0	0.0	978.4	825.5	360	44.30
5	266.0	114.0	0.0	228.0	0.0	932.0	670.0	90	47.03
6	380.0	95.0	0.0	228.0	0.0	932.0	594.0	365	43.70
7	380.0	95.0	0.0	228.0	0.0	932.0	594.0	28	36.45
8	266.0	114.0	0.0	228.0	0.0	932.0	670.0	28	45.85
9	475.0	0.0	0.0	228.0	0.0	932.0	594.0	28	39.29
\n", "
" ], "text/plain": [ " cement blast_furnace_slag fly_ash water superplasticizer \\\n", "0 540.0 0.0 0.0 162.0 2.5 \n", "1 540.0 0.0 0.0 162.0 2.5 \n", "2 332.5 142.5 0.0 228.0 0.0 \n", "3 332.5 142.5 0.0 228.0 0.0 \n", "4 198.6 132.4 0.0 192.0 0.0 \n", "5 266.0 114.0 0.0 228.0 0.0 \n", "6 380.0 95.0 0.0 228.0 0.0 \n", "7 380.0 95.0 0.0 228.0 0.0 \n", "8 266.0 114.0 0.0 228.0 0.0 \n", "9 475.0 0.0 0.0 228.0 0.0 \n", "\n", " coarse_aggregate fine_aggregate age concrete_compressive_strength \n", "0 1040.0 676.0 28 79.99 \n", "1 1055.0 676.0 28 61.89 \n", "2 932.0 594.0 270 40.27 \n", "3 932.0 594.0 365 41.05 \n", "4 978.4 825.5 360 44.30 \n", "5 932.0 670.0 90 47.03 \n", "6 932.0 594.0 365 43.70 \n", "7 932.0 594.0 28 36.45 \n", "8 932.0 670.0 28 45.85 \n", "9 932.0 594.0 28 39.29 " ] }, "execution_count": 5, "metadata": {}, "output_type": "execute_result" } ], "source": [ "import pandas as pd\n", "data = pd.read_csv('data/concrete_data.csv', header=(0))\n", "# valor a ser predito\n", "ylabel = data.columns[-1]\n", "print(\"Número de linhas e colunas:\", data.shape)\n", "data.head(10)\n" ] }, { "cell_type": "code", "execution_count": 6, "metadata": {}, "outputs": [], "source": [ "data = data.to_numpy()\n", "nrow,ncol = data.shape\n", "y = data[:,-1]\n", "X = data[:,0:ncol-1]" ] }, { "cell_type": "code", "execution_count": 7, "metadata": {}, "outputs": [], "source": [ "from sklearn.model_selection import train_test_split\n", "# divide o conjunto em treinamento e teste\n", "p = 0.2 # fracao e elementos no conjnto de teste\n", "x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = p, random_state = 42)" ] }, { "cell_type": "code", "execution_count": 8, "metadata": {}, "outputs": [], "source": [ "from sklearn.linear_model import LinearRegression\n", "\n", "# modelo de regressão linear múltipla\n", "lm = LinearRegression()\n", "lm.fit(x_train, y_train)\n", "\n", "y_pred = lm.predict(x_test)" ] }, { "cell_type": "code", "execution_count": 9, "metadata": {}, "outputs": [ { "data": { "image/png": "\n", "text/plain": [ "
" ] }, "metadata": { "needs_background": "light" }, "output_type": "display_data" } ], "source": [ "import matplotlib.pyplot as plt\n", "\n", "fig = plt.figure()\n", "l = plt.plot(y_pred, y_test, 'bo')\n", "plt.setp(l, markersize=10)\n", "plt.setp(l, markerfacecolor='C0')\n", "\n", "plt.ylabel(\"y\", fontsize=15)\n", "plt.xlabel(\"Prediction\", fontsize=15)\n", "\n", "# mostra os valores preditos e originais\n", "xl = np.arange(min(y_test), 1.2*max(y_test),(max(y_test)-min(y_test))/10)\n", "yl = xl\n", "plt.plot(xl, yl, 'r--')\n", "\n", "plt.show(True)\n", "# salva a figura em um arquivo\n", "fig.savefig('regression-LR.jpg')" ] }, { "cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "R2: 0.627553179231485\n" ] } ], "source": [ "from sklearn.metrics import r2_score\n", "R2 = r2_score(y_test, y_pred)\n", "print('R2:', R2)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Exercício 1" ] }, { "cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "-1125.792682926829\n", "[4.31829268]\n", "[2328.84146341]\n", "{r: 642.798644450720}\n" ] }, { "data": { "text/plain": [ "972.5609756097563" ] }, "execution_count": 3, "metadata": {}, "output_type": "execute_result" }, { "data": { "image/png": "\n", "text/plain": [ "
" ] }, "metadata": { "needs_background": "light" }, "output_type": "display_data" } ], "source": [ "import sympy as sy\n", "import numpy as np\n", "import matplotlib.pyplot as plt\n", "from sklearn.linear_model import LinearRegression\n", "r= [400,500,600,700,750]\n", "r = np.array(r)\n", "p = [600,1050,1440,1900,2120]\n", "r= r.reshape(-1, 1)\n", "modelo = LinearRegression().fit(r, p)\n", "print(modelo.intercept_)\n", "print (modelo.coef_)\n", "plt.scatter(r, p)\n", "plt.plot(r, modelo.predict(r), color = 'red')\n", "# valor de p para r=800 rpm\n", "yr=modelo.intercept_ + modelo.coef_ * 800\n", "print(yr)\n", "#valor de r para p =1650\n", "r=sy.Symbol('r')\n", "p=modelo.intercept_ + modelo.coef_ * r -1650\n", "print(sy.solve(p))\n", "modelo._residues" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [] } ], "metadata": { "kernelspec": { "display_name": "Python 3", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.7.0" } }, "nbformat": 4, "nbformat_minor": 2 }